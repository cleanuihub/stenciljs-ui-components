/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface SearchBar {
    }
    interface SearchButton {
    }
}
export interface SearchBarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSearchBarElement;
}
export interface SearchButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSearchButtonElement;
}
declare global {
    interface HTMLSearchBarElementEventMap {
        "textChange": string;
    }
    interface HTMLSearchBarElement extends Components.SearchBar, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSearchBarElementEventMap>(type: K, listener: (this: HTMLSearchBarElement, ev: SearchBarCustomEvent<HTMLSearchBarElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSearchBarElementEventMap>(type: K, listener: (this: HTMLSearchBarElement, ev: SearchBarCustomEvent<HTMLSearchBarElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSearchBarElement: {
        prototype: HTMLSearchBarElement;
        new (): HTMLSearchBarElement;
    };
    interface HTMLSearchButtonElementEventMap {
        "buttonClick": void;
    }
    interface HTMLSearchButtonElement extends Components.SearchButton, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSearchButtonElementEventMap>(type: K, listener: (this: HTMLSearchButtonElement, ev: SearchButtonCustomEvent<HTMLSearchButtonElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSearchButtonElementEventMap>(type: K, listener: (this: HTMLSearchButtonElement, ev: SearchButtonCustomEvent<HTMLSearchButtonElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSearchButtonElement: {
        prototype: HTMLSearchButtonElement;
        new (): HTMLSearchButtonElement;
    };
    interface HTMLElementTagNameMap {
        "search-bar": HTMLSearchBarElement;
        "search-button": HTMLSearchButtonElement;
    }
}
declare namespace LocalJSX {
    interface SearchBar {
        "onTextChange"?: (event: SearchBarCustomEvent<string>) => void;
    }
    interface SearchButton {
        "onButtonClick"?: (event: SearchButtonCustomEvent<void>) => void;
    }
    interface IntrinsicElements {
        "search-bar": SearchBar;
        "search-button": SearchButton;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "search-bar": LocalJSX.SearchBar & JSXBase.HTMLAttributes<HTMLSearchBarElement>;
            "search-button": LocalJSX.SearchButton & JSXBase.HTMLAttributes<HTMLSearchButtonElement>;
        }
    }
}
